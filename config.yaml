authorized_users:
  - "herpiko"

authorized_groups:
  - "-4876477133"

general_rules: |
  - Avoid using too much emojis.
  - Be clear and concise in your responses.

ask_rules: |
  - Do not reply with too long message.

feat_rules: |
  - If in the working directory there is no clode, clone the repository into that directory. Please utilize git.
  - Before starting any work, make sure your current branch is clean (no uncommitted changes).
  - Always create a new branch for your task before making any edits.
  - Name the new branch based on the context of the task:
  - Use the prefix fix- for bug fixes.
  - Use the prefix feat- for new features.
  - Example branch names:
    - fix-login-error
    - feat-add-user-profile
  - This ensures a clean workflow and keeps commits well organized.
  - Always follow and respect the existing rules and conventions within the codebase.
  - Maintain consistency with the established naming conventions, formatting, and architecture.
  - When in doubt, imitate the existing style rather than introducing a new one.
  - The goal is to keep the codebase uniform and easy to maintain.
  - Please utilize glab command to work with Gitlab features.
  - If there is no code changes, do not create a merge request.
  - Try to find a way to evaluate and test your work. If you cannot, tell me in the summary.
  - The output of the task, other than code changes, are:
    - Commit the changes
    - Push the branch
    - Create merge request.
  - When you asked to write a short summary, put the merge request link (if any).

fix_rules: |
  - If in the working directory there is no clode, clone the repository into that directory. Please utilize git.
  - Before starting any work, make sure your current branch is clean (no uncommitted changes).
  - Always create a new branch for your task before making any edits.
  - Name the new branch based on the context of the task:
  - Use the prefix fix- for bug fixes.
  - Use the prefix feat- for new features.
  - Example branch names:
    - fix-login-error
    - feat-add-user-profile
  - This ensures a clean workflow and keeps commits well organized.
  - Always follow and respect the existing rules and conventions within the codebase.
  - Maintain consistency with the established naming conventions, formatting, and architecture.
  - When in doubt, imitate the existing style rather than introducing a new one.
  - The goal is to keep the codebase uniform and easy to maintain.
  - Please utilize glab command to work with Gitlab features.
  - If there is no code changes, do not create a merge request.
  - Try to find a way to evaluate and test your work. If you cannot, tell me in the summary.
  - The output of the task, other than code changes, are:
    - Commit the changes
    - Push the branch
    - Create merge request.
  - When you asked to write a short summary, put the merge request link (if any).

feedback_rules: |
  - We well continue the existing work branch. Do not clone the repository or clean the branch or switch branch.
  - Always follow and respect the existing rules and conventions within the codebase.
  - Maintain consistency with the established naming conventions, formatting, and architecture.
  - When in doubt, imitate the existing style rather than introducing a new one.
  - The goal is to keep the codebase uniform and easy to maintain.
  - Please utilize glab command to work with Gitlab features.
  - If there is no code changes, do not create a merge request.
  - Try to find a way to evaluate and test your work. If you cannot, tell me in the summary.
  - The output of the task, other than code changes, are:
    - Commit the changes
    - Push the branch
    - Create merge request.
  - When you asked to write a short summary, put the merge request link (if any).

projects:
  - project_name: "chola-backend"
    project_repo: "git@gitlab.com:chola-rent/chola-backend.git"
    project_workdir: "/home/herpiko/src/chola-backend"
